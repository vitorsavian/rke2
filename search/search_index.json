{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"adrs/","title":"Architectural Decision Records (ADRs)","text":"<p>ADRs are a record of the arguments and decisions made to change process or software architecture. The idea is for these records to be regularly reviewed, updated, and documented so that new people or external parties  to a project can read along and understand the points of a decision, the context,   and in general can make educated decisions based on previous discussions.</p> <p>ADRs provide a safer place for individuals who would rather not speak up in face to face communication   (which can feel confrontational) or would like to educate themselves on a topic before commenting.</p>"},{"location":"adrs/#documenting-architecture-decisions","title":"Documenting Architecture Decisions","text":"<p>In Documenting Architecture Decisions Michael Nygard explains the concept as small, easy to read and update documents which give context to a decision.</p> <p>He further explains the alternative (when the context for decisions is lost) as \"Blindly accept the decision.\" or \"Blindly change it.\". We agree with this point and have thus generated our own process for implementing this concept.</p>"},{"location":"adrs/#architectural","title":"Architectural","text":"<p>Micheal defines \"Architectural\" as decisions which \"affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques\" for a project. Our definition is a a bit less structured, essentially if it comes up in a design discussion we want to keep track of it.</p>"},{"location":"adrs/#versioning","title":"Versioning","text":"<p>Michael states that the file names give no context (are simply numbered) and  are never altered once resolved, because \"It's still relevant to know that it was the decision, but is no longer the decision.\". We are choosing to place our ADRs in a version control system where the history of the decision can be queried in the versions of the document itself.  This is handy because it lowers the total number of docs that will accumulate and allows us to give the files contextual names. Our file names can summarize the decision they contain so that readers can easily find and reference that decision.</p>"},{"location":"adrs/#status-types","title":"Status Types","text":"<p>Michael gives four potential statuses for an ADR: \"proposed\", \"accepted\", \"deprecated\", and \"superseded\". Since we are versioning our ADRs and using PRs, we only need \"accepted\", \"rejected\", and \"superseded\", affording us a simpler model. Changes which are in review are handled in PRs, the review is finalized after a period of time with the status of \"accepted\" or \"rejected\". If a decision supersedes another we change the superseded decision's status to \"superseded by <code>doc</code>\" where the doc is a link to the decision which superseded it. Context should be given as to why it is superseded in both the superseded decision in the one superseding.</p>"},{"location":"adrs/#tools","title":"Tools","text":"<p>A command line tool for ADRs is available to help manage the complexity of altering or finding a decision. Our model makes such tools a bit less useful, preferring the use of the tools built into the source code management system.</p>"},{"location":"adrs/#process","title":"Process","text":"<p>The process of preparing, documenting, and presenting a decision should be easy and straightforward, we don't want this process to encumber our ability to change, but enable educated decisions.</p>"},{"location":"adrs/#issue","title":"Issue","text":"<p>The goal of an issue isn't whether or not to accept or reject a decision. The goal of an issue is to decide whether or not a decision needs to be made.</p> <p>Generate an Issue if:    - you have a question or need context about a decision    - you have a suggestion which might need a decision to be made    - you believe additional context might change a decision</p>"},{"location":"adrs/#pull-request","title":"Pull Request","text":"<p>Generate a PR if:    - you have additional context for a decision    - a decision was made and there is no ADR for it    - you brought up a decision in a design discussion and a change was suggested</p> <p>Pull requests are more closely tied to the file version than Issues,  so we prefer conversations about the decision to be in the Pull Request,  where it can more easily be found.</p>"},{"location":"adrs/#step-by-step-process-for-a-new-adr","title":"Step By Step Process for a new ADR","text":"<ol> <li>You have an idea to improve a process, design, etc</li> <li>Document the idea to present in the design discussion</li> <li>there is a format for this to help you get started</li> <li>create a pull request for the decision with the outcome you would like (approved/rejected)</li> <li>Link the new PR in the discuss-rancher-k3s-rke2 slack channel and notify the team</li> <li>Present the idea in the design discussion meeting</li> <li>Record any context brought forward in the design discussion</li> <li>this should result in a update to the PR</li> <li>Wait one week</li> <li>this gives everyone who would like to comment in the PR the ability to do so</li> <li>add any added context from the comments to the PR</li> <li>Present the outcome of the decision in the next design discussion</li> <li>if new context is brought forward, record it, add it to the PR, and wait another week</li> <li>repeat this process until there is no new context</li> <li>each week you present the ADR make sure to link in slack and notify the team</li> <li>finalize the decision by merging the PR</li> <li>merging should still have the normal requirements (2 approvals and passing CI)</li> </ol>"},{"location":"adrs/#step-by-step-process-for-updating-an-adr","title":"Step By Step Process for updating an ADR","text":"<ol> <li>You have some new context on an existing decision</li> <li>Generate a PR to add the context</li> <li>Merge after the normal requirements (2 approvals and CI passes)</li> <li>this process should not alter the decision, only add context to it</li> <li>any time the decision's status should change,   please make sure the team is aware and has had time to discuss.</li> </ol>"},{"location":"adrs/#step-by-step-process-for-revisiting-an-adr","title":"Step By Step Process for revisiting an ADR","text":"<ol> <li>You disagree with the decision section of an ADR</li> <li>maybe this is due to some new context that you added</li> <li>The decision was made greater than a week ago (the ADR PR should have merged &gt; 7 days ago)</li> <li>this really only applies if there was no new context</li> <li>if you have new context for a decision there should not be any waiting to present a change in the decision</li> <li>this is meant to prevent excessive decision changes, not slow down any necessary change</li> <li>Generate a PR to change the decision section of the ADR</li> <li>Present your point of view in the next design discussion</li> <li>Add any context discovered from the discussion to the PR</li> <li>Highlight the change in slack and notify the team</li> <li>Wait one week</li> <li>Update the PR with any context added in the PR discussion</li> <li>Present the outcome of the decision in the next design discussion</li> <li>Finalize the change by merging the PR</li> <li>if the change is not agreed upon and no context was added then don't merge and close the PR</li> <li>merging should still have the normal requirements (2 approvals and passing CI)</li> </ol>"},{"location":"adrs/001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2022-01-26</p>"},{"location":"adrs/001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"adrs/001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"adrs/001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools.</p>"},{"location":"adrs/002-rke2-rpm-support/","title":"2. RPM support for RKE2","text":"<p>Date: 2022-01-20</p>"},{"location":"adrs/002-rke2-rpm-support/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/002-rke2-rpm-support/#context","title":"Context","text":"<p>RKE2 publishes RPMs for distribution of RKE2 through the https://github.com/rancher/rke2-packaging repository. These RPMs are built using automated calls to <code>rpmbuild</code> and corresponding GPG signing/publishing plugins, and publish RPMs to the <code>rpm.rancher.io</code>/<code>rpm-testing.rancher.io</code> S3-backed buckets.</p>"},{"location":"adrs/002-rke2-rpm-support/#decision","title":"Decision","text":"<p>Until a more robust RPM building/mechanism is established for RKE2, we will not add any new platforms for RPM publishing beyond the existing CentOS/RHEL 7 and 8 RPMs that are published. We will publish selinux policy RPMs for new platforms as needed, and ensure the selinux RPMs are compatible with the tarball installation method for the platform in question.</p> <p>This decision can be re-evaluated in the future if a more robust RPM publishing technique/platform is developed/made available. </p>"},{"location":"adrs/002-rke2-rpm-support/#consequences","title":"Consequences","text":"<p>The only supported installation method for all platforms except CentOS 7/8 with selinux support will be a combination of the use of a tarball install in conjunction with an selinux policy RPM.</p>"},{"location":"adrs/003-rke2-rpm-sle-support/","title":"3. RPM SLE support for RKE2","text":"<p>Date: 2022-01-27</p>"},{"location":"adrs/003-rke2-rpm-sle-support/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/003-rke2-rpm-sle-support/#context","title":"Context","text":"<p>RKE2 publishes RPMs for SUSE OS distributions, the rpms will be installed via transactional updates if exists, this will enable two things, the installation of rke2-selinux and the extraction of the binaries in the right <code>/usr</code> paths instead of the alternative tarball installation which will extract the binaries in <code>/opt</code>.</p>"},{"location":"adrs/003-rke2-rpm-sle-support/#decision","title":"Decision","text":"<p>We will add support for RPM publishing for SUSE OS distributions in rke2-packaging repo, the <code>rke2-server</code> and <code>rke2-agent</code> packages will require installing <code>rke2-common</code> which will in turn install the <code>rke2-selinux</code> RPM package which is already supported for microos.</p> <p>The decision will involve defaulting to the tarball installation for SUSE OS distribution in the installation script to prevent breaking current compatibility with users who currently installed via tarball installation, the RPM installation will be allowed via passing the environment variable <code>RKE2_INSTALL_METHOD=rpm</code> to the install script.</p> <p>The installation script will also have measures to prevent installation switching from RPM to tarball installation and vice versa, and finally the installation via the tarball method will not allow SELINUX to be enabled unless manually.</p>"},{"location":"adrs/003-rke2-rpm-sle-support/#consequences","title":"Consequences","text":"<p>The decision will result in some drawbacks:</p> <ul> <li>The decision will not enable RPM installation by default.</li> <li>The tarball installation will not enable SELINUX by default.</li> </ul>"},{"location":"adrs/004-rke2-rc-versioning/","title":"4. Release Candidate 'RC' Version Format","text":"<p>Date: 2022-07-14</p>"},{"location":"adrs/004-rke2-rc-versioning/#status","title":"Status","text":"<p>Rejected</p>"},{"location":"adrs/004-rke2-rc-versioning/#question","title":"Question","text":"<p>Should we remove the <code>-rc</code> text from the prerelease section of RKE2 releases so that we can reduce the overall steps necessary in releasing?</p>"},{"location":"adrs/004-rke2-rc-versioning/#context","title":"Context","text":"<p>Our workflow for generating Release Candidates for RKE2 is the same as our workflow for generating GA RKE2 releases, with the exception of the \"-rc\" text in the prerelease section of the git tag.</p>"},{"location":"adrs/004-rke2-rc-versioning/#strengths","title":"Strengths","text":"<ul> <li>reduce CI time by producing one less release</li> <li>reduce manual effort by producing one less release (no need to update KDM)</li> <li>reduce the time from a release being approved to it being published</li> <li>improve reliability of the artifacts by promoting the artifacts tested rather than rebuilding them</li> </ul>"},{"location":"adrs/004-rke2-rc-versioning/#weaknesses","title":"Weaknesses","text":"<ul> <li>if we don't rebuild hardened images, we wouldn't have a way to know the version number of the release candidate</li> <li>testing would be more difficult because we wouldn't know the difference between an \"rc-1\" and an \"rc-2\"</li> <li>GitHub won't let you generate duplicate releases/tags</li> <li>we would either have to delete the release and move the tag (essentially removing the rc version)</li> <li>or figure out some other way to version the release candidates</li> </ul>"},{"location":"adrs/004-rke2-rc-versioning/#opportunities","title":"Opportunities","text":"<ul> <li>normalizing the process would make it easier to automate</li> <li>SLSA compliance states that certification \"is not transitive\" predicating artifact orientation</li> </ul>"},{"location":"adrs/004-rke2-rc-versioning/#threats","title":"Threats","text":"<ul> <li>a customer might mistake a RC artifact for a GA artifact</li> </ul>"},{"location":"adrs/004-rke2-rc-versioning/#decision","title":"Decision","text":"<p>We need to be able to quickly reference the differences between a release candidate and a general admission release, and the risk that a user might mistake an RC artifact for a GA artifact is too high for the benefits provided.</p>"},{"location":"adrs/004-rke2-rc-versioning/#consequences","title":"Consequences","text":"<p>We will (continue to) place <code>-rc</code> in the prerelease section of the version number for RKE2 tags and releases. For example : <code>v1.24.3-rc1+rke2r1</code></p>"},{"location":"adrs/004-servicelb-support/","title":"Support for ServiceLB Load-Balancer Controller in RKE2","text":"<p>Date: 2022-09-30</p>"},{"location":"adrs/004-servicelb-support/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/004-servicelb-support/#context","title":"Context","text":"<p>RKE2 does not currently bundle a load-balancer controller. Users that want to deploy Services of type LoadBalancer must deploy a real cloud-provider chart, or use an alternative such as MetalLB or Kube-VIP.</p>"},{"location":"adrs/004-servicelb-support/#decision","title":"Decision","text":"<p>Taking advantage of recent changes to move ServiceLB into the K3s stub cloud-provider, we will allow RKE2 to run ServiceLB as part of a proper clould controller integration. This will require adding CLI flags to enable servicelb, as well as exposing existing K3s flags to configure its namespace. Running servicelb will be opt-in, behind a new flag, to avoid changing behavior on existing clusters.</p>"},{"location":"adrs/004-servicelb-support/#consequences","title":"Consequences","text":"<ul> <li>RKE2 uses less resources when ServiceLB is disabled, as several core controllers are no longer started unconditionally.</li> <li>The <code>--disable-cloud-controller</code> flag now disables the CCM's <code>cloud-node</code> and <code>cloud-node-lifecycle</code> controllers that were historically the only supported controllers.</li> <li>The <code>--enable-servicelb</code> flag now prevents <code>--disable=servicelb</code> from being passed in to K3s, which in turn enables the CCM's <code>service</code> controller.</li> <li>If the cloud-controller and servicelb are both disabled, the cloud-controller-manager is not run at all.</li> <li>The K3s <code>--servicelb-namespace</code> flag is now passed through instead of dropped.</li> </ul>"},{"location":"adrs/005-security-updates-automation/","title":"Security updates and versions bump automation","text":"<p>Date: 2022-11-18</p>"},{"location":"adrs/005-security-updates-automation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/005-security-updates-automation/#context","title":"Context","text":"<p>The current process of keeping third-party dependencies and container images up to date is manual and time consuming, which makes us lack behind upstream updates. This leads to RKE2 sometimes shipping outdated dependencies and images that can introduce security issues (CVEs) in our code and in users environments. A process is needed to automate the discovery of updates and PRs, so developers don't need to spend valuable time with manual tasks that can be easily automate.</p> <p>The basic requirements that we need for such automation regarding the tooling are:</p> <ol> <li>The tool is free and open-source.</li> <li>Supports major packages ecosystems - Docker, Go, Python etc.</li> <li>Automatically opens pull requests (PRs).</li> <li>Preferably supports bumping versions in unstructured formats, e.g., <code>ENV</code> vars in Dockerfiles and by matching regular expressions.</li> <li>Preferably supports scripting the automation process, e.g., update package A in repo B after package X in repo Y matches a pre-defined version criteria.</li> </ol> <p>There are well known free and/or open-source tools available for this kind of automation:</p>"},{"location":"adrs/005-security-updates-automation/#1-dependabot","title":"1. Dependabot","text":"<ul> <li>Provides PR automation for version and security updates.</li> <li>Is provided as a service by GitHub and free for public and private repos.</li> <li>There is no need to add a GH app or token in the repo.</li> <li>Simple to configure in the repo settings in GitHub and with an YAML configuration <code>.github/dependabot.yml</code> file.</li> <li>Supports bumping of images in Dockerfiles and major packages ecosystem. See full list here.</li> <li>Doesn't support:</li> <li>Bumping versions in unstructured formats.</li> <li>Orchestrating updates.</li> </ul>"},{"location":"adrs/005-security-updates-automation/#2-renovate","title":"2. Renovate","text":"<ul> <li>Is similar to Dependabot.</li> <li>Requires installation of Renovate bot as a GH app.</li> <li>Is provided as a service by Mend (previously called WhiteSource).</li> <li>Is configured through a JSON file <code>renovate.json</code>.</li> <li>Supports bumping of images in Dockerfiles and major packages ecosystem. See full list here.</li> <li>Supports version bumps in unstructured formats through data sources.</li> <li>Doesn't support orchestrating updates.</li> </ul>"},{"location":"adrs/005-security-updates-automation/#3-updatecli","title":"3. Updatecli","text":"<ul> <li>Is similar to Dependabot and Renovate.</li> <li>Is installed as a GH Action.</li> <li>Requires configuration of a GH token.</li> <li>Is fully open-source and a core maintainer is a current SUSE employee.</li> <li>All configurations must be scripted as an YAML file.</li> <li>For bumps in images and Go dependencies, for example, it's necessary to script the steps more verbosely when compared to Dependabot and Renovate.</li> <li>Supports version bumps in unstructured formats.</li> <li>Supports orchestrating updates through <code>conditions</code>.</li> <li>It's being used in some SUSE projects - Epinio and Kubewarden. Soon will also be implemented in Rancher.</li> </ul> <p>Each tool has its strong points and a combination of them will be required.</p> Features x Tool Dependabot Renovate Updatecli Provides pull request automation \u2705 \u2705 \u2705 Minimal configuration required for bumping major packages ecosystems \u2705 \u2705 \u26aa Minimal integration required (no GH app or token) \u2705 \u26aa \u26aa Supports version bumps in unstructured formats \u26aa \u2705 \u2705 Supports orchestrating updates \u26aa \u26aa \u2705 Offers greater extensibility \u26aa \u26aa \u2705"},{"location":"adrs/005-security-updates-automation/#decision","title":"Decision","text":"<p>Based on the evaluated context, we decided to use Dependabot and Updatecli for automating version and security bumps.</p> <ul> <li>Dependabot for its simplicity to integrate with GitHub and covering the major packages ecosystem with minimal configuration required.</li> <li>Updatecli for allowing orchestration and automation of updates in unstructured formats.</li> </ul>"},{"location":"adrs/005-security-updates-automation/#consequences","title":"Consequences","text":"<ul> <li>PRs for version bumps of dependencies are automated.</li> <li>PRs for security updates of dependencies are automated.</li> <li>Developers spend less time doing manual tasks.</li> <li>RKE2 code and images are shipped with fewer security issues in dependencies.</li> <li>Users benefit from greater security.</li> </ul>"},{"location":"adrs/006-add-flannel-support/","title":"Flannel support in rke2","text":""},{"location":"adrs/006-add-flannel-support/#established","title":"Established","text":""},{"location":"adrs/006-add-flannel-support/#revisit-by","title":"Revisit by","text":""},{"location":"adrs/006-add-flannel-support/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/006-add-flannel-support/#context","title":"Context","text":"<p>Currently RKE2-windows users can only deploy with one supported CNI plugin: Calico. In the last weeks, we have had several users complaining about a TCP Reset issue that breaks their applications. For example, applications that rely on a stable connectivity towards external nodes, like Jenkins Server, are impossible to operate if TCP Resets appears.</p> <p>The TCP Reset issue is known by Tigera (the company behind Calico) and documented here As described in that doc, the issue should only appear when using network policies. Customers state that when using network policies the problem is constant but even without network policies, the TCP Resets appear from time to time with no clear trigger for it.</p> <p>It is hard to understand where are those TCP Resets coming from because the code creating the virtual network infrastructure in Windows is closed sourced and the documentation is very poor and not really explaining the details, so we can only especulate. I think the problem is that windows creates a TCP Proxy in their VMSwitches when using VFP (Virtual Filtering Platform) and whenever a rule, affecting the pod, of VFP changes, the TCP Proxy is recreated and thus all TCP connections are reset. It is probably part of the design of VFP and thus complicated to really work around it. Calico uses VFP to do the network policies.</p> <p>We have been communicating all this to Tigera and Microsoft but so far, the resolution to the problem does not seem to be close at hand. It feels like a complicated problem created by the VFP design.</p> <p>Moreover, some of these users were previous users of RKE1-windows with flannel and they were happy with it. THey are asking to have the possibility to continue with flannel in RKE2.</p>"},{"location":"adrs/006-add-flannel-support/#proposal","title":"Proposal","text":"<p>Include flannel as a CNI plugin alternative for RKE2. We know that it has limitations and it is really simple but it seems it could be enough for Windows users that are feeling the pain of the Calico TCP Resets</p>"},{"location":"adrs/006-add-flannel-support/#strength","title":"Strength","text":"<ul> <li>We can offer a plan B for customers that can't afford getting TCP Resets</li> <li>We have an alternative while Microsoft and Tigera fix the problem</li> <li>We are maintainers of flannel and could support it easily</li> </ul>"},{"location":"adrs/006-add-flannel-support/#weakness","title":"Weakness","text":"<ul> <li>Yet another cni plugin to support</li> <li>Flannel is very limited. We should document it very well to avoid disappointment on non-knowledgeable customers</li> </ul>"},{"location":"adrs/adr-template/","title":"ADR Format Template","text":"<p>This template provides a canvas for generating ADRs and a standard format so that we can build tools to parse them. - notes are added to this template to help elaborate on the points without a separate document - notes will be prefixed with a dash</p>"},{"location":"adrs/adr-template/#established","title":"Established","text":"<p>2022-07-20 - this section should contain only the YYYY-MM-DD date of when the decision is considered final - this can be added after context is given, in the PR which will wait for 1 week before merge</p>"},{"location":"adrs/adr-template/#revisit-by","title":"Revisit by","text":"<p>2023-07-15 - this section should contain only the YYYY-MM-DD date of when the decision is considered stale - at the next design discussion we should validate and renew this date</p>"},{"location":"adrs/adr-template/#subject","title":"Subject","text":"<p>Given <code>data</code>, when <code>triggering event</code>, then we <code>do something</code>.</p> <ul> <li>the person should be first person plural</li> <li>\"we\" do something</li> <li>not \"I\", \"you\", or \"they\"</li> <li>the tense should be simple present, </li> <li>we \"do\" something</li> <li>not \"does\", \"doing\", \"did\", or \"done\"</li> <li>the mood should be indicative</li> <li>we \"do\" something</li> <li>not \"go do\"</li> <li>Given when then statements should be used as often as possible to get as much context into the subject as possible.</li> <li>Don't force 'given, when, then'; if there is no triggering event or no data given, then leave those parts out.</li> </ul>"},{"location":"adrs/adr-template/#status","title":"Status","text":"<p>Accepted / Rejected / Superseded by #other-issue - accepted is the decision that the subject is appropriate and we will do it. - rejected is the decision that the subject isn't appropriate and we won't do it. - superseded relates that a different decision forces this decision (for instance a decision made at a higher level of abstraction)</p>"},{"location":"adrs/adr-template/#context","title":"Context","text":"<ul> <li>the following is a simple framework for judging a decision, these items are not required, but may be useful to the writer.</li> </ul>"},{"location":"adrs/adr-template/#strength-of-doing-process","title":"Strength of doing process","text":""},{"location":"adrs/adr-template/#weakness-of-doing-process","title":"Weakness of doing process","text":""},{"location":"adrs/adr-template/#threats-involved-in-not-doing-process","title":"Threats involved in not doing process","text":""},{"location":"adrs/adr-template/#threats-involved-in-doing-process","title":"Threats involved in doing process","text":""},{"location":"adrs/adr-template/#opportunities-involved-in-doing-process","title":"Opportunities involved in doing process","text":"<ul> <li>a different approach to context framework</li> </ul>"},{"location":"adrs/adr-template/#pros","title":"Pros","text":""},{"location":"adrs/adr-template/#cons","title":"Cons","text":""}]}